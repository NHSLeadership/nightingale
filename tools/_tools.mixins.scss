// ==========================================================================
// #MIXINS
// ========================================================================== */





// Drop clearfix styles into our element.
// ========================================================================== */

@mixin clearfix() {

  /**
   * For modern browsers
   * 1. The space content is one way to avoid an Opera bug when the
   *    contenteditable attribute is included anywhere else in the document.
   *    Otherwise it causes space to appear at the top and bottom of elements
   *    that are clearfixed.
   * 2. The use of `table` rather than `block` is only necessary if using
   *    `:before` to contain the top-margins of child elements.
   */
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }

  @if ($global-oldIE == true) {
    /**
     * For IE 6/7 only
     * Include this rule to trigger hasLayout and contain floats.
     */
    *zoom: 1;
  }

}





// Create a rem-based font-size that automatically sits on our baseline grid.
// ========================================================================== */

@mixin font-size($font-size, $line-height: generate-automatically) {
  font-size: $font-size;
  font-size: ($font-size / $global-font-size) * 1rem;

  // If we haven’t specified a line-height explicitly, let’s automatically
  // create one that sits on the next closest unit of our baseline grid.
  @if ($line-height == generate-automatically) {
    line-height: ceil($font-size / $global-line-height) * ($global-line-height / $font-size);
  }

  // If we have passed a line-height value into the mixin, let’s check it and
  // convert it.
  @else {

    // Strip any units from numerical values
    @if (type-of($line-height) == number) {
      line-height: strip-unit($line-height) / strip-unit($font-size);
    }

    // If we’ve passed in either `inherit` or `normal` keywords, treat them as
    // literal.
    @else if ($line-height == "inherit" or $line-height == "normal") {
      line-height: $line-height;
    }

    @else {

      @warn "`#{$line-height}` is not a valid value for `line-height`. Values can be pixel values, or keywords `inherit` or `normal`.";

    }

  }

}





// Generate a rem-based property with its pixel fallback
// ========================================================================== */

@mixin rem($property, $value) {

  @if (type-of($value) == number and unit($value) == 'px') {

    #{$property}: $value;
    #{$property}: rem($value);

  }

  @else {

    @error "`@include rem()` expected a pixel value. Actual value was: `#{$value}`";

  }


}





// Visually hidden content
//
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// ========================================================================== */

@mixin hide-visually($important: false) {

  @if ($important == false) {
    $important: null;
  } @else {
    $important: !important;
  }

  border: 0 $important;
  clip: rect(0 0 0 0) $important;
  height: 1px $important;
  margin: -1px $important;
  overflow: hidden $important;
  padding: 0 $important;
  position: absolute $important;
  width: 1px $important;
}





// Spriting setup mixin
//
// This mixin simply holds some shared styles for sprites; it doesn’t actually
// create anything yet. It’s a private mixin because, currently, it’s not much
// use on its own so can’t really be used arbitrarily.
//
// 1. Where does the sprite actually live?
// 2. The default kinda size for most icons.
// 3. How big is the regular sprite image?
// 4. Remove residual styles from other elements (e.g. BUTTONs).
// ========================================================================== */

@mixin _sprite-setup() {
  display: inline-block;
  vertical-align: middle;
  background-image: url(#{$image-path}sprite/icons.png); // 1
  width: 20px; // 2
  height: 20px; // 2
  background-color: transparent; // 4
  border: none; // 4
  padding: 0; // 4

  // Retina screens get a nicer sprite
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
         only screen and (   min--moz-device-pixel-ratio: 2),
         only screen and (     -o-min-device-pixel-ratio: 2/1),
         only screen and (        min-device-pixel-ratio: 2),
         only screen and (                min-resolution: 192dpi),
         only screen and (                min-resolution: 2dppx) {
    background-image: url(#{$image-path}sprite/icons@2x.png); // 1
    background-size: 396px 266px; // 3
  }

}

// Sprite creation mixin
//
// This mixin is used to actually create sprites. Pass in a named sprite (found
// in `$global-sprite`) and optionally whether or not the sprite will be held in
// generated content (i.e. `:before` or `:after`).
//
// Usage:
//
//     .foo {
//       @include sprite(arrow-down);
//     }
//
//     .bar:after {
//       @include sprite(info, true)
//     }
//
// ========================================================================== */

@mixin sprite($image, $generated: false) {

  @if ($generated != false) {
    content: "";
    @include _sprite-setup();
  }

  background-position: map-deep-get($global-sprite, $image, x) map-deep-get($global-sprite, $image, y);
  width: map-deep-get($global-sprite, $image, width);
  height: map-deep-get($global-sprite, $image, height);
}





// Kellum
//
// The Kellum method for image replacement is beautifully simple:
// zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
// ========================================================================== */

@mixin kellum() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}





// Opacity
//
// In older browsers we need better fallbacks for opacity.

@mixin opacity($value) {

  @if ($global-oldIE == true) {
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value * 100})";
    filter: alpha(opacity=#{$value * 100});
  }

  opacity: $value;
}
